group_by(gender_total,workerid,trial_gender,trial_congruency,poli_party) %>%
summarise(meanrt = mean(resid_rt))
sprt_speaker_means_ideology %>%
filter(!is.na(poli_party)) %>%
ggplot(aes(x=gender_total,y=meanrt,color=trial_gender,linetype=trial_congruency)) +
geom_point() +
geom_smooth(method='lm') +
scale_color_manual(values = bran_palette, ) +
facet_wrap(~poli_party)
sprt_data %>%
filter(!is.na(poli_party)) %>%
group_by(gender_total,workerid,trial_gender,poli_party,condition) %>%
summarise(meanrt = mean(resid_rt)) %>%
ggplot(aes(x=gender_total,y=meanrt,color=trial_gender)) +
geom_point() +
geom_smooth(method='lm') +
scale_color_manual(values = bran_palette, ) +
facet_grid(condition~poli_party)
final_spr %>%
ggplot(aes(x))
sprt_data %>%
filter(!is.na(poli_party)) %>%
filter(trial_congruency == "neutral") %>%
group_by(gender_trans,workerid,trial_gender,poli_party) %>%
summarise(meanrt = mean(resid_rt)) %>%
ggplot(aes(x=gender_trans,y=meanrt,color=trial_gender)) +
geom_point() +
geom_smooth(method='lm') +
scale_color_manual(values = bran_palette, ) +
facet_wrap(~poli_party)
sprt_data %>%
filter(!is.na(poli_party)) %>%
filter(trial_congruency == "neutral") %>%
group_by(gender_link,workerid,trial_gender,poli_party) %>%
summarise(meanrt = mean(resid_rt)) %>%
ggplot(aes(x=gender_link,y=meanrt,color=trial_gender)) +
geom_point() +
geom_smooth(method='lm') +
scale_color_manual(values = bran_palette, ) +
facet_wrap(~poli_party)
sprt_data <- merge(sprt_data,lex_freqs,by="lexeme") %>%
mutate(mean_neutral = (sum(mean_left_neutral,mean_right_neutral))/2)
sprt_data %>%
filter(!is.na(poli_party)) %>%
filter(trial_congruency == "neutral") %>%
ggplot(aes(x=gender_total,y=resid_rt,color=trial_gender)) +
geom_point() +
geom_smooth(method='lm') +
scale_color_manual(values = bran_palette, ) +
labs(x="Gender Total",y="Residual Reading Time", color="Trial Gender")
sprt_data %>%
filter(!is.na(poli_party)) %>%
group_by(poli_party,condition,trial_gender,trial_congruency) %>%
summarize(MeanRT = mean(resid_rt), CI.Low = ci.low(resid_rt), CI.High = ci.high(resid_rt)) %>%
mutate(YMin = MeanRT - CI.Low, YMax = MeanRT + CI.High) %>%
ggplot(aes(x=condition,y=MeanRT,color=trial_gender,shape=trial_congruency)) +
geom_point(size=3) +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
facet_wrap(~ poli_party, nrow = 1) +
theme(axis.text.x = element_text(angle = 45, vjust = .7, hjust=.7)) +
scale_color_manual(values = bran_palette) +
labs(x="Condition", y="Residual Reading Time", shape="Trial Congruency", color="Trial Gender")
```{r}
sprt_data %>%
filter(!is.na(poli_party)) %>%
group_by(gender_total,workerid,trial_gender,poli_party,condition) %>%
summarise(meanrt = mean(resid_rt)) %>%
ggplot(aes(x=gender_total,y=meanrt,color=trial_gender)) +
geom_point() +
geom_smooth(method='lm') +
scale_color_manual(values = bran_palette, ) +
facet_grid(condition~poli_party)
sprt_data %>%
filter(!is.na(poli_party)) %>%
group_by(gender_total,workerid,trial_gender,poli_party,condition) %>%
summarise(meanrt = mean(resid_rt)) %>%
ggplot(aes(x=gender_total,y=meanrt,color=trial_gender)) +
geom_point() +
geom_smooth(method='lm') +
scale_color_manual(values = bran_palette) +
facet_grid(condition~poli_party)
install.packages("htmltools")
install.packages("htmltools")
#This chode chunk loads the 4 libraries needed for the analysis and visualization
library(tidyverse) #Tidy data, ggplot2, etc.
library(mlogit) #logit function, for multinomial analyses
library(lme4,lmertest) #for mixed logistic binomial regressions
library(formattable,DT) # Prettier tables
library(rmdformats) # For the custom html output
library(shiny) # interactive tabls
# Here's some custom visual styling stuff
bran_palette = c("#7ae7e5", "#fe5f55", "#B2A6DE", "#14342b", "#69385c")
voice_palette = c("#DB995A","#654236") #Defines a custom color palette we can use in ggplot graphs; stored as a list of hex codes
type_palette = c("#7EBDC2","#DA7635")
# FAA6FF Additional HEX
# "#81b29a","f2cc8f"
theme_set(theme_bw()) #Sets the defaut theme of all ggplot objects to black & white
customGreen = "#71CA97" #Another custom green for the formattable tables
source("helpers.R")
source("helpers.R")
#This chode chunk loads the 4 libraries needed for the analysis and visualization
library(tidyverse) #Tidy data, ggplot2, etc.
library(mlogit) #logit function, for multinomial analyses
library(lme4,lmertest) #for mixed logistic binomial regressions
library(formattable,DT) # Prettier tables
library(rmdformats) # For the custom html output
library(shiny) # interactive tabls
# Here's some custom visual styling stuff
bran_palette = c("#7ae7e5", "#fe5f55", "#B2A6DE", "#14342b", "#69385c")
voice_palette = c("#DB995A","#654236") #Defines a custom color palette we can use in ggplot graphs; stored as a list of hex codes
type_palette = c("#7EBDC2","#DA7635")
# FAA6FF Additional HEX
# "#81b29a","f2cc8f"
theme_set(theme_bw()) #Sets the defaut theme of all ggplot objects to black & white
customGreen = "#71CA97" #Another custom green for the formattable tables
source("helpers.R")
# I'm also importing a custom function from [https://mikeyharper.uk/about/] which allows us to collapse table rows when they have the same values
# Collapse the values within a grouped dataframe
collapse_rows_df <- function(df, variable){
group_var <- enquo(variable)
df %>%
group_by(!! group_var) %>%
mutate(groupRow = 1:n()) %>%
ungroup() %>%
mutate(!!quo_name(group_var) := ifelse(groupRow == 1, as.character(!! group_var), "")) %>%
select(-c(groupRow))
}
itkonen <- read.csv("itkonen-rep.csv") %>%
filter(choice != "True") %>%
mutate(comments = subject_information.comments,
age = as.numeric(subject_information.age),
gender = as.factor(subject_information.gender),
region = as.factor(subject_information.region),
education = as.numeric(subject_information.education)) %>%
select(-c("subject_information.gender","subject_information.comments","subject_information.age","subject_information.region","subject_information.education"))
itkonenOriginal <- read.csv("itkonen-original.csv")
nomForms = c("kappalainen","harvinainen erikoistapaus","valtio valtiossa","persikka","tulipalo","jokin maininta","mikään maininta","persoonallinen suhde"," kappalainen")
genForms = c("kappalaisen","harvinaisen erikoistapauksen","valtion valtiossa","persikan","tulipalon","jonkin maininnan","minkään maininnan","persoonallisen suhteen")
partForms = c("kappalaista","harvinaista erikoistapausta","valtiota valtiossa","persikkaa","tulipaloa","mitään mainintaa","persoonallista suhdetta")
attForms = c("on","olet","olen")
itkonen <- itkonen %>%
mutate("responseCase" = case_when(
response %in% nomForms ~ "nom", #if the reponse case is available in the above-defined nominative list, create a new column with the value "nom" for that trial
response %in% genForms ~ "gen", # ... and the same for genitive and partitive, as well as attention
response %in% partForms ~ "part",
response %in% attForms ~ "attn",
TRUE ~ "uncoded"
))
exclusionList <- itkonen %>%
filter(responseCase == "attn") %>% # Take only the attention trials
group_by(workerid) %>% # Group the data frame by each participant
summarise(accuracy = mean(as.numeric(attention))) %>% # For each participant, calculate a score between 0-1, the mean of their attention checks; 1 = passed attention check, 0 = failed attention check
mutate(exclude = ifelse(accuracy < 1,'Yes','No')) %>% #If that mean is anything lower than 1 (perfect attention), we want to give them the characteristic "EXCLUDE=TRUE"
filter(exclude == "Yes") #Now filter out all the people who passed, so we get a list of the people who failed only
itkonen <- itkonen[!(itkonen$workerid %in% exclusionList$workerid),] #Now remove from the full dataframe all the participants who are listed on the list we just created
itkonenOriginal %>%
mutate(itemNomRateOriginal = 100*itemNomRateOriginal) %>%
rename("Item" = item,
"Voice" = voice,
"Type" = type,
"Rate of Nominative (x/100)" = itemNomRateOriginal) %>%
select(-c("itemGenRateOriginal")) %>%
group_by(Item) %>%
slice(1:4) %>%
select(Item, everything()) %>%
collapse_rows_df(Item) %>%
formattable(align=c("l"), list(
area(col = "Rate of Nominative (x/100)") ~ color_tile("transparent", customGreen))) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
ReplicationOnly <- itkonen %>%
filter(polarity == "positive") %>%
filter(item != "jokin2") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
TRUE ~ 0
))
replicationItems <- ReplicationOnly %>%
group_by(item,voice,type,responseCase) %>%
count() %>%
pivot_wider(names_from = responseCase,values_from = n) %>%
replace_na(list(gen=0)) %>%
summarize(itemNomRate = nom/(nom+gen),
itemGenRate = 1-itemNomRate)
compItems <- left_join(itkonenOriginal,replicationItems)
compItems <- compItems %>%
mutate(itemNomRate = trunc(itemNomRate*10^2),
itemGenRate = trunc(itemGenRate*10^2),
itemNomRateOriginal = trunc(itemNomRateOriginal*10^2),
itemGenRateOriginal = trunc(itemGenRateOriginal*10^2),
nomChange = itemNomRate - itemNomRateOriginal) %>%
select(-c("itemGenRate","itemGenRateOriginal"))
ReplicationOnly <- ReplicationOnly %>%
mutate(type = factor(type,ordered = FALSE)) %>%
mutate(voice = factor(voice,ordered = FALSE))
ReplicationOnly$type = relevel(ReplicationOnly$type, ref="existential")
ReplicationOnly$voice = relevel(ReplicationOnly$voice, ref="active")
full_model = glmer(as.factor(responseBinary)~voice*type + age + (1|workerid) + (1|item),data=ReplicationOnly,family="binomial")
summary(full_model)
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(voice) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=voice,y=nomRate, fill=voice)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Voice",y="Proportion of Nominative Responses",title="Replication Results: Voice") +
ylim(0,1) +
geom_text(aes(x=voice,y=nomRate, vjust =-2, label=trunc(nomRate*10^2)/(10^2))) +
scale_fill_manual(values=voice_palette) +
theme_classic() +
theme(legend.position = "none")
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(type) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=type,y=nomRate, fill=type)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Voice",y="Proportion of Nominative Responses",title="Replication Results: Voice") +
ylim(0,1) +
geom_text(aes(x=type,y=nomRate, vjust =-1.5, label=trunc(nomRate*10^2)/10^2)) +
scale_fill_manual(values = type_palette) +
theme_classic() +
theme(legend.position = "none")
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(type,voice) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(type, nomRate),y=nomRate, fill=type)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_text(aes(x=type,y=nomRate, vjust =-1.3, label=trunc(nomRate*10^2)/10^2)) +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Voice x Structure") +
scale_fill_manual(values=type_palette) +
facet_wrap(~voice) +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
ReplicationOnly %>%
filter(voice=="active") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(item) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(item, -nomRate),y=nomRate, fill=item)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_text(aes(x=item,y=nomRate, vjust =4, label=trunc(nomRate*10^2)/10^2)) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Active Only") +
scale_fill_brewer(palette="Paired") +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
ReplicationOnly %>%
filter(voice=="passive") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(item) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(item, -nomRate),y=nomRate, fill=item)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_text(aes(x=item,y=nomRate, vjust =4, label=trunc(nomRate*10^2)/10^2)) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Passive Only") +
scale_fill_brewer(palette="Paired") +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
nomRates <- ReplicationOnly %>%
group_by(workerid,responseCase) %>%
count() %>%
pivot_wider(names_from = responseCase,values_from = n) %>%
summarize(NomRate = nom/22)
ReplicationOnly <- left_join(ReplicationOnly,nomRates)
ReplicationOnly %>%
filter(!is.na(age)) %>%
#  filter(age < 60) %>%
ggplot(aes(x=age,y=NomRate)) +
geom_point() +
geom_smooth(method="lm") +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(y="Proportion of Nominative Responses",title="Replication Results: Age") +
ylim(0,1)
ReplicationOnly %>%
filter(region != "null") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(region) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
count = as.numeric(n()),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(region,-nomRate),y=nomRate, alpha=count)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Voice",y="Proportion of Nominative Responses",title="Replication Results: Region") +
ylim(0,1) +
geom_text(aes(x=region,y=nomRate, vjust =-1.5, label=trunc(nomRate*10^2)/10^2)) +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust = .5))
#theme(legend.position = "none")
replicationConditions <- ReplicationOnly %>%
group_by(voice,type) %>%
summarize(nomRate = mean(responseBinary),
year = "2022")
itkonenConditions <- itkonenOriginal %>%
group_by(voice,type) %>%
summarize(nomRate = mean(itemNomRateOriginal),
year = "1976")
compConditions <- rbind(itkonenConditions,replicationConditions)
dodge = position_dodge(.9)
compConditions %>%
ggplot(aes(x=voice,y=nomRate,fill=year)) +
geom_bar(stat="identity",position=position_dodge()) +
geom_text(aes(x=voice,y=nomRate,label=trunc(nomRate*10^2)/10^2),position=dodge) +
facet_wrap(~type) +
labs(x="Voice",y="Proportion of Nominative Responses",fill="Year")
compItems %>%
rename("Item" = "item",
"Voice" = "voice",
"Structure" = "type",
"Nominative Proportion (1976)" = "itemNomRateOriginal",
"Nominative Proportion (2022)" = "itemNomRate",
"Change (1976 -> 2022)" = "nomChange") %>%
formattable(align = c("l"), list(
area(col = "Change (1976 -> 2022)") ~ color_tile("transparent", customGreen),
area(col = "Nominative Proportion (2022)") ~ color_tile("transparent", "#e38f8f"),
area(col = "Nominative Proportion (1976)") ~ color_tile("transparent", "#8fc4e3"))) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
neg <- itkonen %>%
filter(polarity == "negative") %>%
filter(item != "jokin2")
neg %>%
group_by(voice,responseCase) %>%
count() %>%
pivot_wider(values_from = n, names_from = responseCase) %>%
mutate(genRate = trunc(gen/(nom+gen+part)*10^2)/10^2,
nomRate = trunc(nom/(nom+gen+part)*10^2)/10^2,
partRate = trunc(part/(nom+gen+part)*10^2)/10^2) %>%
rename(Voice = voice, Genitive = genRate, Nominative = nomRate, Partitive = partRate) %>%
select(-c("nom","gen","part")) %>%
formattable(align=c("l"), list(
area(row = 1, col=2:4) ~ color_tile("transparent", customGreen),
area(row = 2, col=2:4) ~ color_tile("transparent", customGreen)))
neg %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase != "nom" ~ 0,
)) %>%
group_by(voice) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=voice,y=nomRate, fill=voice)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Voice",y="Proportion of Responses",title="Negative Results: Voice") +
ylim(0,1) +
geom_text(aes(x=voice,y=nomRate, vjust =-2, label=trunc(nomRate*10^2)/(10^2))) +
scale_fill_manual(values=voice_palette) +
theme_classic() +
theme(legend.position = "none")
indiGenRatesPos <- itkonen %>%
filter(attention=="critical") %>%
filter(polarity == "positive") %>%
filter(item != "jokin2") %>%
mutate(responseBinary = case_when(
responseCase == "gen" ~ 1,
responseCase != "gen" ~ 0,
)) %>%
group_by(workerid,age,gender) %>%
summarize(indiGenRatePos = mean(responseBinary)) %>%
select(c("workerid","indiGenRatePos","age","gender"))
indiNomRatesNeg <- itkonen %>%
filter(attention=="critical") %>%
filter(polarity == "negative") %>%
filter(item != "jokin2") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase != "nom" ~ 0,
)) %>%
group_by(workerid) %>%
summarize(indiNomRateNeg = mean(responseBinary)) %>%
select(c("workerid","indiNomRateNeg"))
indiRates <- left_join(indiGenRatesPos,indiNomRatesNeg)
indiRates %>%
ggplot(aes(x=indiGenRatePos,indiNomRateNeg)) +
geom_point(alpha=0.5) +
geom_smooth(method = "lm") +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Gen. Rate in Positive Constructions",y="Nom. Rate in Negative Constructions")
neg %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase != "nom" ~ 0,
)) %>%
group_by(item,voice) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(item,-nomRate),y=nomRate, fill=item)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
facet_wrap(~voice) +
labs(x="Voice",y="Proportion of Nominative Responses",title="Negative Results: Item by Voice") +
ylim(0,1) +
geom_text(aes(x=item,y=nomRate, vjust =-3, label=trunc(nomRate*10^2)/(10^2))) +
scale_fill_brewer(palette="Paired") +
theme_classic() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle=45, vjust=.6))
neg %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase != "nom" ~ 0,
)) %>%
group_by(region) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
count = n()
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(region,-nomRate),y=nomRate, fill=region,alpha=count)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Voice",y="Proportion of Nominative Responses",title="Negative Results: Item by Voice") +
ylim(0,1) +
geom_text(aes(x=region,y=nomRate, vjust =-3, label=trunc(nomRate*10^2)/(10^2))) +
# scale_fill_brewer(palette="Paired") +
theme_classic() +
# theme(legend.position = "none") +
theme(axis.text.x = element_text(angle=45, vjust = .5))
neg %>%
filter(responseCase == "uncoded")
neg %>%
filter(responseCase != "uncoded") %>%
group_by(voice,responseCase) %>%
count() %>%
pivot_wider(values_from = n, names_from = responseCase) %>%
mutate(genRate = trunc(gen/(nom+gen+part)*10^2)/10^2,
nomRate = trunc(nom/(nom+gen+part)*10^2)/10^2,
partRate = trunc(part/(nom+gen+part)*10^2)/10^2) %>%
rename(Voice = voice, Genitive = genRate, Nominative = nomRate, Partitive = partRate) %>%
select(-c("nom","gen","part")) %>%
formattable(align=c("l"), list(
area(row = 1, col=2:4) ~ color_tile("transparent", customGreen),
area(row = 2, col=2:4) ~ color_tile("transparent", customGreen)))
