mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase != "nom" ~ 0,
)) %>%
group_by(voice) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=voice,y=nomRate, fill=voice)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Voice",y="Proportion of Responses",title="Negative Results: Voice") +
ylim(0,1) +
geom_text(aes(x=voice,y=nomRate, vjust =-2, label=trunc(nomRate*10^2)/(10^2))) +
scale_fill_manual(values=voice_palette) +
theme_classic() +
theme(legend.position = "none")
indiGenRatesPos <- itkonen %>%
filter(attention=="critical") %>%
filter(polarity == "positive") %>%
filter(item != "jokin2") %>%
mutate(responseBinary = case_when(
responseCase == "gen" ~ 1,
responseCase != "gen" ~ 0,
)) %>%
group_by(workerid,age,gender) %>%
summarize(indiGenRatePos = mean(responseBinary)) %>%
select(c("workerid","indiGenRatePos","age","gender"))
indiNomRatesNeg <- itkonen %>%
filter(attention=="critical") %>%
filter(polarity == "negative") %>%
filter(item != "jokin2") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase != "nom" ~ 0,
)) %>%
group_by(workerid) %>%
summarize(indiNomRateNeg = mean(responseBinary)) %>%
select(c("workerid","indiNomRateNeg"))
indiRates <- left_join(indiGenRatesPos,indiNomRatesNeg)
indiRates %>%
ggplot(aes(x=indiGenRatePos,indiNomRateNeg)) +
geom_point(alpha=0.5) +
geom_smooth(method = "lm") +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Gen. Rate in Positive Constructions",y="Nom. Rate in Negative Constructions")
neg %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase != "nom" ~ 0,
)) %>%
group_by(item,voice) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(item,-nomRate),y=nomRate, fill=item)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
facet_wrap(~voice) +
labs(x="Voice",y="Proportion of Nominative Responses",title="Negative Results: Item by Voice") +
ylim(0,1) +
geom_text(aes(x=item,y=nomRate, vjust =-3, label=trunc(nomRate*10^2)/(10^2))) +
scale_fill_brewer(palette="Paired") +
theme_classic() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle=45, vjust=.6))
compConditions %>%
ggplot(aes(x=voice,y=nomRate,fill=year)) +
geom_bar(stat="identity",position=position_dodge()) +
geom_text(aes(x=voice,y=nomRate,label=trunc(nomRate*10^2)/10^2),position=dodge) +
facet_wrap(~type) +
labs(x="Voice",y="Proportion of Nominative Responses",fill="Year")
itkonenOriginal %>%
mutate(itemNomRateOriginal = 100*itemNomRateOriginal) %>%
rename("Item" = item,
"Voice" = voice,
"Type" = type,
"Rate of Nominative (x/100)" = itemNomRateOriginal) %>%
select(-c("itemGenRateOriginal")) %>%
group_by(Item) %>%
slice(1:4) %>%
select(Item, everything()) %>%
collapse_rows_df(Item) %>%
formattable(align=c("l"), list(
area(col = "Rate of Nominative (x/100)") ~ color_tile("transparent", customGreen))) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE,
caption = "Table Test")
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(type,voice,workerid) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(type, nomRate),y=nomRate, fill=type)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_text(aes(x=type,y=nomRate, vjust =-1.3, label=trunc(nomRate*10^2)/10^2)) +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Voice x Structure") +
scale_fill_manual(values=type_palette) +
facet_wrap(workerid~voice) +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
mutate(nomRate = nom/(nom+gen))
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = nom/(nom+gen))
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseCase)) %>%
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseCase))
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseCase))
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary))
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice)
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice,type)
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice)
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = active,passive names_from = type)
nomRate
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice)
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
mutate(Hierarchy = case_when(
active <= passive ~ "Yes",
TRUE ~ "No"
))
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
mutate(Hierarchy = case_when(
active <= passive ~ "Yes",
TRUE ~ "No"
)) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
mutate(Hierarchy = case_when(
active <= passive ~ "Yes",
TRUE ~ "No"
)) %>%
formattable(align=c("l")) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = type) %>%
mutate(Hierarchy = case_when(
existential <= predicative ~ "Yes",
TRUE ~ "No"
)) %>%
formattable(align=c("l")) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice)
ReplicationOnly %>%
filter(type == "existential") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice)
ReplicationOnly %>%
filter(type == "existential") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(Existential_Active = active, Existential_Passive = passive)
ExistentialIndi <- ReplicationOnly %>%
filter(type == "existential") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(ExistentialActive = active, ExistentialPassive = passive)
PredicativeIndi <- ReplicationOnly %>%
filter(type == "predicative") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(PredicativeActive = active, PredicativelPassive = passive)
IndiMeans <- left_join(ActiveIndi,PredicativeIndi)
IndiMeans <- left_join(ExistentialIndi,PredicativeIndi)
View(IndiMeans)
PredicativeIndi <- ReplicationOnly %>%
filter(type == "predicative") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(PredicativeActive = active, PredicativelPassive = passive)
View(PredicativeIndi)
IndiMeans <- left_join(ExistentialIndi,PredicativeIndi)
ExistentialIndi <- ReplicationOnly %>%
filter(type == "existential") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(ExistentialActive = active, ExistentialPassive = passive)%>%
select(-c("type"))
PredicativeIndi <- ReplicationOnly %>%
filter(type == "predicative") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(PredicativeActive = active, PredicativelPassive = passive) %>%
select(-c("type"))
IndiMeans <- left_join(ExistentialIndi,PredicativeIndi)
IndiMeans %>%
formattable(align=c("l")) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
PredicativeIndi <- ReplicationOnly %>%
filter(type == "predicative") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(PredicativeActive = active, PredicativePassive = passive) %>%
select(-c("type"))
IndiMeans <- left_join(ExistentialIndi,PredicativeIndi)
IndiMeans %>%
formattable(align=c("l")) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
install.package("sparkline")
install.packages("sparkline")
library(sparkline)
IndiMeans %>%
mutate(Sparkline = sparkline(c(2:5), type='bar')) %>%
formattable(align=c("l")) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(c(1,2,7,6,5), type = "bar")))) %>%
formattable(align=c("l")) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(c(1,2,7,6,5), type = "bar")))) %>%
formattable(align=c("l")) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE)
out
out = as.htmlwidget(formattable(df))
out = as.htmlwidget(formattable(df))
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(c(1,2,7,6,5), type = "bar"))))
out = as.htmlwidget(formattable(df))
out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies("sparkline", "sparkline"))
out
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(c(2:5), type = "bar"))))
out = as.htmlwidget(formattable(df))
out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies("sparkline", "sparkline"))
out
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(c("ExistentialActive","ExistentialPassive"), type = "bar"))))
out = as.htmlwidget(formattable(df))
out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies("sparkline", "sparkline"))
out
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(c("ExistentialActive","ExistentialPassive","PredicativeActive","PredicativePassive"), type = "bar"))))
out = as.htmlwidget(formattable(df))
out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies("sparkline", "sparkline"))
out
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(c("ExistentialActive","ExistentialPassive","PredicativeActive","PredicativePassive"), type = "bar", ylim=1))))
out = as.htmlwidget(formattable(df))
out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies("sparkline", "sparkline"))
out
ExistentialIndi <- ReplicationOnly %>%
filter(type == "existential") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)*10^2) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(ExistentialActive = active, ExistentialPassive = passive)%>%
select(-c("type"))
PredicativeIndi <- ReplicationOnly %>%
filter(type == "predicative") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)*10^2) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(PredicativeActive = active, PredicativePassive = passive) %>%
select(-c("type"))
IndiMeans <- left_join(ExistentialIndi,PredicativeIndi)
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(c("ExistentialActive","ExistentialPassive","PredicativeActive","PredicativePassive"), type = "bar", ylim=1))))
out = as.htmlwidget(formattable(df))
out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies("sparkline", "sparkline"))
out
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(as.numeric(c("ExistentialActive","ExistentialPassive","PredicativeActive","PredicativePassive")), type = "bar", ylim=1))))
out = as.htmlwidget(formattable(df))
out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies("sparkline", "sparkline"))
out
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(as.numeric(c("ExistentialActive","ExistentialPassive","PredicativeActive","PredicativePassive")), type = "bar"))))
df <- IndiMeans %>%
mutate(Sparkline  = htmltools::as.tags(sparkline(as.numeric(c("ExistentialActive","ExistentialPassive","PredicativeActive","PredicativePassive")), type = "bar"))))
df <- IndiMeans %>%
mutate(Sparkline  = htmltools::as.tags(sparkline(as.numeric(c("ExistentialActive","ExistentialPassive","PredicativeActive","PredicativePassive")), type = "bar")))
df <- IndiMeans %>%
mutate(Sparkline  = htmltools::as.tags(sparkline(c("ExistentialActive","ExistentialPassive","PredicativeActive","PredicativePassive"), type = "bar")))
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(2:5), type = "bar")))
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(2:5, type = "bar")))
df <- IndiMeans %>%
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(2:5, type = "bar"))))
View(df)
out = as.htmlwidget(formattable(df))
out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies("sparkline", "sparkline"))
out
df <- IndiMeans %>%
mutate(Sparkline  = as.character(htmltools::as.tags(sparkline(2:5, type = "bar"))))
out = as.htmlwidget(formattable(df))
out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies("sparkline", "sparkline"))
out
?sparkline
?spk_chr
IndiMeans <- ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary))
IndiMeans %>%
group_by(workerid) %>%
summarise(
Noms = spk_chr(
nomRate, type = "bar"
)
) %>%
formattable() %>%
formattable::as.htmlwidget() %>%
spk_add_deps()
IndiMeans %>%
group_by(workerid) %>%
summarise(
Noms = spk_chr(
nomRate, type = "bar",
chartRangeMin = 0, chartRangeMax=1
)
) %>%
formattable() %>%
formattable::as.htmlwidget() %>%
spk_add_deps()
