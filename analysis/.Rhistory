"Falstaff Scarf" = "#30E4FF",
"Falstaff Nose" = "#3E3E3E",
"Vikram Blue" = "#0184C3",
"Vikram Midlight" = "#006CAB",
"Vikram Lowlight" = "#00448F",
"Vikram Shirt" = "#CB348D",
"Vikram Shirt Accent" = "#A81D71",
"Junior Hair" = "#FF9600",
"Junior Buzz" = "#FEB67A",
"Junior Shirt" = "#30E4FF",
"Junior Jeans" = "#0184C3",
"Junior Shoes" = "#535353",
"Lily Hair" = "#A570FF",
"Lily Shirt" = "#594086",
"Lily Eyes" = "#3E3D3E",
"Lily Skin" = "#FFC6B7",
"Lily Nose" = "#EC9583",
"Lin Coat" = "#C86A03",
"Lin Pockets" = "#B45F01",
"Lin Pants" = "#744007",
"Lin Hair" = "#3D3D3D",
"Lin Shoes" = "#FFB101",
"Lucy Hair" = "#3D3D3D",
"Lucy Grey" = "#C8C8C8",
"Lucy Vest" = "#FF9601",
"Lucy Shirt" = "#FFB101",
"Lucy Skin" = "#FFCBA4",
"Oscar Hair" = "#3D3D3D",
"Oscar Skin" = "#DA8E73",
"Oscar Shirt" = "#FFAADE",
"Oscar Pants" = "#3BFF9D",
"Oscar Shoes" = "#1CB0F7",
"Oscar Belt" = "#A56546",
"Zari Hijab" = "#FFB6E4",
"Zari Shoes" = "#FF86CE",
"Zari Shirt" = "#1CB0F7",
"Zari Skin" = "#E18D6F",
"Zari Hair" = "#3D3C3D"
)
duolingo_cols <- function(...) {
cols <- c(...)
if (is.null(cols))
return (duolingo_colors)
duolingo_colors[cols]
}
duolingo_cols()
duolingo_cols("Tongue Pink")
duolingo_palettes <- list(
`Duo`  = duolingo_cols("Feather Green", "Wing Overlay", "Mask Green", "Beak Upper", "Beak Highlight","Beak Inner", "Tongue Pink", "Eel"),
`Bea` = duolingo_cols("Bea Hair", "Bea Orange", "Bea Jeans", "Bea Cuffs", "Bea Shoes & Eddy Band"),
`Eddy` = duolingo_cols("Eddy Pants","Bea Shoes & Eddy Band", "Eddy Hair", "Lily Skin"),
`Falstaff` = duolingo_cols("Falstaff Nose", "Falstaff Fur", "Falstaff Fur Midlight", "Falstaff Fur Highlight", "Falstaff Scarf"),
`Vikram` = duolingo_cols("Vikram Blue", "Vikram Midlight", "Vikram Lowlight", "Vikram Shirt", "Vikram Shirt Accent"),
`Junior` = duolingo_cols("Junior Hair", "Junior Buzz", "Junior Shirt", "Junior Jeans", "Junior Shoes"),
`Lily` = duolingo_cols("Lily Hair", "Lily Shirt", "Lily Eyes", "Lily Skin", "Lily Nose"),
`Lin` = duolingo_cols("Lin Hair","Lin Pants","Lin Pocket","Lin Coat", "Lin Shoes"),
`Lucy` = duolingo_cols("Lucy Hair", "Lucy Grey", "Lucy Vest", "Lucy Shirt", "Lucy Skin"),
`Oscar` = duolingo_cols("Oscar Hair", "Oscar Belt", "Oscar Skin", "Oscar Shoes","Oscar Pants","Oscar Shirt"),
`Zari` = duolingo_cols("Zari Hijab", "Zari Shoes", "Zari Shirt", "Zari Hair", "Zari Skin")
)
duolingo_pal <- function(palette = "main", reverse = FALSE, ...) {
pal <- duolingo_palettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
duolingo_pal("Duo")
scale_color_duolingo <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- duolingo_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("duolingo_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
scale_fill_duolingo <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- duolingo_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("fill", paste0("duolingo_", palette), palette = pal, ...)
} else {
scale_fill_gradientn(colours = pal(256), ...)
}
}
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Duo")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Duo")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Bea", discrete = TRUE)
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Bea")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Eddy", discrete = TRUE)
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Eddy")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Falstaff", discrete = TRUE, reverse = TRUE)
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Falstaff")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Vikram")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Vikram")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Junior")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Junior")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Lily")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Lily")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Lin")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Lin")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Lucy")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Lucy")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Oscar")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Oscar")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_duolingo(palette = "Zari")
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_duolingo(discrete = FALSE, palette = "Zari")
#This chode chunk loads the 4 libraries needed for the analysis and visualization
library(tidyverse) #Tidy data, ggplot2, etc.
library(mlogit) #logit function, for multinomial analyses
library(lme4,lmertest) #for mixed logistic binomial regressions
library(formattable,DT) # Prettier tables
library(rmdformats) # For the custom html output
library(shiny) # interactive tabls
library(lingglosses)
library(sparkline)
# Here's some custom visual styling stuff
bran_palette = c("#7ae7e5", "#fe5f55", "#B2A6DE", "#14342b", "#69385c")
voice_palette = c("#DB995A","#654236") #Defines a custom color palette we can use in ggplot graphs; stored as a list of hex codes
type_palette = c("#7EBDC2","#DA7635")
# FAA6FF Additional HEX
# "#81b29a","f2cc8f"
theme_set(theme_bw()) #Sets the defaut theme of all ggplot objects to black & white
customGreen = "#71CA97" #Another custom green for the formattable tables
customGreen0 = "#bfd6c9"
source("helpers.R")
# I'm also importing a custom function from [https://mikeyharper.uk/about/] which allows us to collapse table rows when they have the same values
# Collapse the values within a grouped dataframe
collapse_rows_df <- function(df, variable){
group_var <- enquo(variable)
df %>%
group_by(!! group_var) %>%
mutate(groupRow = 1:n()) %>%
ungroup() %>%
mutate(!!quo_name(group_var) := ifelse(groupRow == 1, as.character(!! group_var), "")) %>%
select(-c(groupRow))
}
itkonen <- read.csv("itkonen-rep.csv") %>%
filter(choice != "True") %>%
mutate(comments = subject_information.comments,
age = as.numeric(subject_information.age),
gender = as.factor(subject_information.gender),
region = as.factor(subject_information.region),
education = as.numeric(subject_information.education)) %>%
select(-c("subject_information.gender","subject_information.comments","subject_information.age","subject_information.region","subject_information.education"))
itkonenOriginal <- read.csv("itkonen-original.csv")
nomForms = c("kappalainen","harvinainen erikoistapaus","valtio valtiossa","persikka","tulipalo","jokin maininta","mikään maininta","persoonallinen suhde"," kappalainen")
genForms = c("kappalaisen","harvinaisen erikoistapauksen","valtion valtiossa","persikan","tulipalon","jonkin maininnan","minkään maininnan","persoonallisen suhteen")
partForms = c("kappalaista","harvinaista erikoistapausta","valtiota valtiossa","persikkaa","tulipaloa","mitään mainintaa","persoonallista suhdetta")
attForms = c("on","olet","olen")
itkonen <- itkonen %>%
mutate("responseCase" = case_when(
response %in% nomForms ~ "nom", #if the reponse case is available in the above-defined nominative list, create a new column with the value "nom" for that trial
response %in% genForms ~ "gen", # ... and the same for genitive and partitive, as well as attention
response %in% partForms ~ "part",
response %in% attForms ~ "attn",
TRUE ~ "uncoded"
))
exclusionList <- itkonen %>%
filter(responseCase == "attn") %>% # Take only the attention trials
group_by(workerid) %>% # Group the data frame by each participant
summarise(accuracy = mean(as.numeric(attention))) %>% # For each participant, calculate a score between 0-1, the mean of their attention checks; 1 = passed attention check, 0 = failed attention check
mutate(exclude = ifelse(accuracy < 1,'Yes','No')) %>% #If that mean is anything lower than 1 (perfect attention), we want to give them the characteristic "EXCLUDE=TRUE"
filter(exclude == "Yes") #Now filter out all the people who passed, so we get a list of the people who failed only
itkonen <- itkonen[!(itkonen$workerid %in% exclusionList$workerid),] #Now remove from the full dataframe all the participants who are listed on the list we just created
gloss_example(
'Pekka luul-i [metsä-ssä ole-va-n **karhu~karhu-n**]',
'Pekka.NOM think-PAST [forest-INE be-ACT.PRES-GEN **bear.NOM~bear-GEN**{]}',
'Pekka thought there to be a bear in the forest',
italic_transliteration = FALSE
)
itkonenOriginal %>%
mutate(itemNomRateOriginal = 100*itemNomRateOriginal) %>%
rename("Item" = item,
"Voice" = voice,
"Type" = type,
"Rate of Nominative (x/100)" = itemNomRateOriginal) %>%
select(-c("itemGenRateOriginal")) %>%
group_by(Item) %>%
slice(1:4) %>%
select(Item, everything()) %>%
collapse_rows_df(Item) %>%
formattable(align=c("l"), list(
area(col = "Rate of Nominative (x/100)") ~ color_tile("transparent", customGreen))) %>%
as.datatable(escape = FALSE,
options = list(scrollX = TRUE,
pageLength = 100),
rownames = FALSE,
caption = "Itkonen (1976)'s original nominative production proportions")
ReplicationOnly <- itkonen %>%
filter(polarity == "positive") %>%
filter(item != "jokin2") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
TRUE ~ 0
))
replicationItems <- ReplicationOnly %>%
group_by(item,voice,type,responseCase) %>%
count() %>%
pivot_wider(names_from = responseCase,values_from = n) %>%
replace_na(list(gen=0)) %>%
summarize(itemNomRate = nom/(nom+gen),
itemGenRate = 1-itemNomRate)
compItems <- left_join(itkonenOriginal,replicationItems)
compItems <- compItems %>%
mutate(itemNomRate = trunc(itemNomRate*10^2),
itemGenRate = trunc(itemGenRate*10^2),
itemNomRateOriginal = trunc(itemNomRateOriginal*10^2),
itemGenRateOriginal = trunc(itemGenRateOriginal*10^2),
nomChange = itemNomRate - itemNomRateOriginal) %>%
select(-c("itemGenRate","itemGenRateOriginal"))
ReplicationOnly <- ReplicationOnly %>%
mutate(type = factor(type,ordered = FALSE)) %>%
mutate(voice = factor(voice,ordered = FALSE))
ReplicationOnly$type = relevel(ReplicationOnly$type, ref="existential")
ReplicationOnly$voice = relevel(ReplicationOnly$voice, ref="active")
full_model = glmer(as.factor(responseBinary)~voice*type + age + (1|workerid) + (1|item),data=ReplicationOnly,family="binomial")
summary(full_model)
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(voice) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=voice,y=nomRate, fill=voice)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Voice",y="Proportion of Nominative Responses",title="Replication Results: Voice") +
ylim(0,1) +
geom_text(aes(x=voice,y=nomRate, vjust =-2, label=trunc(nomRate*10^2)/(10^2))) +
scale_fill_manual(values=voice_palette) +
theme_classic() +
theme(legend.position = "none")
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(type) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=type,y=nomRate, fill=type)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Structure",y="Proportion of Nominative Responses",title="Replication Results: Structure") +
ylim(0,1) +
geom_text(aes(x=type,y=nomRate, vjust =-1.5, label=trunc(nomRate*10^2)/10^2)) +
scale_fill_manual(values = type_palette) +
theme_classic() +
theme(legend.position = "none")
ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(type,voice) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(type, nomRate),y=nomRate, fill=type)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_text(aes(x=type,y=nomRate, vjust =-1.3, label=trunc(nomRate*10^2)/10^2)) +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Voice x Structure") +
scale_fill_manual(values=type_palette) +
facet_wrap(~voice) +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
IndiMeans <- ReplicationOnly %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary))
# pivot_wider(values_from = nomRate, names_from = voice) %>%
# rename(ExistentialActive = active, ExistentialPassive = passive)%>%
# select(-c("type"))
IndiMeansSpark <- IndiMeans %>%
group_by(workerid) %>%
summarise(
Noms = spk_chr(
nomRate, type = "bar",
chartRangeMin = 0, chartRangeMax=1
)
)
PredicativeIndi <- ReplicationOnly %>%
filter(type == "predicative") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)*10^2) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(PredicativeActive = active, PredicativePassive = passive) %>%
select(-c("type"))
ExistentialIndi <- ReplicationOnly %>%
filter(type == "existential") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(workerid,voice,type) %>%
summarize(nomRate = mean(responseBinary)*10^2) %>%
pivot_wider(values_from = nomRate, names_from = voice) %>%
rename(ExistentialActive = active, ExistentialPassive = passive) %>%
select(-c("type"))
IndiMeansNoSpark <- left_join(ExistentialIndi,PredicativeIndi)
IndiMeans <- left_join(IndiMeansNoSpark,IndiMeansSpark)
IndiMeans %>%
select(-c(2:5)) %>%
rename("Anonymous Worker Identifier" = workerid, 'Rates of Nominative Productions' = Noms) %>%
formattable(align=c("l")) %>%
formattable::as.htmlwidget() %>%
spk_add_deps()
# , lapply(1:nrow(IndiMeans), function(row){
#     area(row, col=2:5) ~ color_tile(customGreen0,customGreen)
#   }
ReplicationOnly %>%
filter(voice=="active") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(item) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(item, -nomRate),y=nomRate, fill=item)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_text(aes(x=item,y=nomRate, vjust =4, label=trunc(nomRate*10^2)/10^2)) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Active Only") +
scale_fill_brewer(palette="Paired") +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
ReplicationOnly %>%
filter(voice=="passive") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(item) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(item, -nomRate),y=nomRate, fill=item)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_text(aes(x=item,y=nomRate, vjust =4, label=trunc(nomRate*10^2)/10^2)) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Passive Only") +
scale_fill_brewer(palette="Paired") +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
nomRates <- ReplicationOnly %>%
group_by(workerid,responseCase) %>%
count() %>%
pivot_wider(names_from = responseCase,values_from = n) %>%
summarize(NomRate = nom/22)
ReplicationOnly <- left_join(ReplicationOnly,nomRates)
ReplicationOnly %>%
filter(!is.na(age)) %>%
#  filter(age < 60) %>%
ggplot(aes(x=age,y=NomRate)) +
geom_point() +
geom_smooth(method="lm") +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(y="Proportion of Nominative Responses",title="Replication Results: Age") +
ylim(0,1)
ReplicationOnly %>%
filter(region != "null") %>%
mutate(responseBinary = case_when(
responseCase == "nom" ~ 1,
responseCase == "gen" ~ 0,
)) %>%
group_by(region) %>%
summarize(
nomRate = mean(responseBinary),
CI.Low = ci.low(responseBinary),
CI.High = ci.high(responseBinary),
count = as.numeric(n()),
) %>%
mutate(YMin = nomRate - CI.Low, YMax = nomRate + CI.High) %>%
ggplot(aes(x=reorder(region,-nomRate),y=nomRate, alpha=count)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=YMin,ymax=YMax), width=.25) +
geom_hline(yintercept=.5, linetype="dashed", color = "black") +
labs(x="Voice",y="Proportion of Nominative Responses",title="Replication Results: Region") +
ylim(0,1) +
geom_text(aes(x=region,y=nomRate, vjust =-1.5, label=trunc(nomRate*10^2)/10^2)) +
theme_classic() +
theme(axis.text.x = element_text(angle=45, vjust = .5))
#theme(legend.position = "none")
replicationConditions <- ReplicationOnly %>%
group_by(voice,type) %>%
summarize(nomRate = mean(responseBinary),
year = "2022")
itkonenConditions <- itkonenOriginal %>%
group_by(voice,type) %>%
summarize(nomRate = mean(itemNomRateOriginal),
year = "1976")
compConditions <- rbind(itkonenConditions,replicationConditions)
View(ReplicationOnly)
mixedModelReplication <- lmer(responseCase ~ voice*type + (1|workerid) + (1|item), data=ReplicationOnly)
mixedModelReplication <- lmer(as.factor(responseCase) ~ voice*type + (1|workerid) + (1|item), data=ReplicationOnly)
mixedModelReplication <- lmer(responseCase~voice*type + (1|workerid) + (1|item), data=ReplicationOnly)
ReplicationOnly$responseCase = relevel(ReplicationOnly$responseCase, ref="gen")
ReplicationOnly <- ReplicationOnly %>%
mutate(responseCase = factor(responseCase,ordered = FALSE)) %>%
ReplicationOnly$responseCase = relevel(ReplicationOnly$responseCase, ref="gen")
ReplicationOnly <- ReplicationOnly %>%
mutate(responseCase = factor(responseCase,ordered = FALSE))
ReplicationOnly$responseCase = relevel(ReplicationOnly$responseCase, ref="gen")
mixedModelReplication <- lmer(responseCase~voice*type + (1|workerid) + (1|item), data=ReplicationOnly)
mixedModelReplication <- lmer(as.factor(responseCase)~voice*type + (1|workerid) + (1|item), data=ReplicationOnly)
mixedModelReplication <- lmer(as.factor(responseBinary)~voice*type + (1|workerid) + (1|item), data=ReplicationOnly)
mixedModelReplication <- glmer(as.factor(responseBinary)~voice*type + (1|workerid) + (1|item), data=ReplicationOnly, family="binomial")
summary(mixedModelReplication)
ReplicationOnly$structure = relevel(ReplicationOnly$structure, ref="active")
ReplicationOnly$structure = relevel(ReplicationOnly$structure, ref="existential")
ReplicationOnly <- ReplicationOnly %>%
mutate(responseCase = factor(responseCase,ordered = FALSE)) %>%
mutate(voice = factor(voice,ordered = FALSE)) %>%
mutate(structure = factor(structure,ordered = FALSE))
ReplicationOnly <- ReplicationOnly %>%
mutate(responseCase = factor(responseCase,ordered = FALSE)) %>%
mutate(voice = factor(voice,ordered = FALSE)) %>%
mutate(structure = factor(structure,ordered = FALSE))
ReplicationOnly <- ReplicationOnly %>%
mutate(responseCase = factor(responseCase,ordered = FALSE)) %>%
mutate(voice = factor(voice,ordered = FALSE)) %>%
mutate(type = factor(type,ordered = FALSE))
ReplicationOnly$responseCase = relevel(ReplicationOnly$responseCase, ref="gen")
ReplicationOnly$voice = relevel(ReplicationOnly$voice, ref="active")
ReplicationOnly$type = relevel(ReplicationOnly$type, ref="existential")
mixedModelReplication <- glmer(as.factor(responseBinary)~voice*type + (1|workerid) + (1|item), data=ReplicationOnly, family="binomial")
summary(mixedModelReplication)
mixedModelReplication <- glmer(as.factor(responseBinary)~voice*type + (1|workerid + item + type + voice) + (1|item + type + voice), data=ReplicationOnly, family="binomial")
mixedModelReplication <- glmer(as.factor(responseBinary)~voice*type + (1 + workerid|item) + (1|item), data=ReplicationOnly, family="binomial")
summary(mixedModelReplication)
mixedModelReplication <- glmer(as.factor(responseBinary)~voice*type + (1 + item|workerid) + (1|item), data=ReplicationOnly, family="binomial")
summary(mixedModelReplication)
mixedModelReplication <- glmer(as.factor(responseBinary)~voice*type + (1|workerid) + (1|item), data=ReplicationOnly, family="binomial")
summary(mixedModelReplication)
