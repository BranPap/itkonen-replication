#This chode chunk loads the 4 libraries needed for the analysis and visualization
library(tidyverse) #Tidy data, ggplot2, etc.
library(mlogit) #logit function, for multinomial analyses
library(lme4) #for mixed logistic binomial regressions
library(formattable,DT) # Prettier tables
library(rmdformats) # For the custom html output
# Here's some custom visual styling stuff
bran_palette = c("#7ae7e5", "#fe5f55", "#B2A6DE", "#14342b", "#69385c")
voice_palette = c("#3d405b","#e07a5f") #Defines a custom color palette we can use in ggplot graphs; stored as a list of hex codes
type_palette = c("#BBF2D0","#758ECD")
# FAA6FF Additional HEX
# "#81b29a","f2cc8f"
theme_set(theme_bw()) #Sets the defaut theme of all ggplot objects to black & white
customGreen = "#71CA97" #Another custom green for the formattable tables
# I'm also importing a custom function from [https://mikeyharper.uk/about/] which allows us to collapse table rows when they have the same values
# Collapse the values within a grouped dataframe
collapse_rows_df <- function(df, variable){
group_var <- enquo(variable)
df %>%
group_by(!! group_var) %>%
mutate(groupRow = 1:n()) %>%
ungroup() %>%
mutate(!!quo_name(group_var) := ifelse(groupRow == 1, as.character(!! group_var), "")) %>%
select(-c(groupRow))
}
itkonen <- read.csv("itkonen-rep.csv") %>%
filter(choice != "True") %>%
mutate(comments = subject_information.comments,
age = as.numeric(subject_information.age),
gender = as.factor(subject_information.gender),
region = as.factor(subject_information.region),
education = as.numeric(subject_information.education)) %>%
select(-c("subject_information.gender","subject_information.comments","subject_information.age","subject_information.region","subject_information.education"))
itkonenOriginal <- read.csv("itkonen-original.csv")
nomForms = c("kappalainen","harvinainen erikoistapaus","valtio valtiossa","persikka","tulipalo","jokin maininta","mikään maininta","persoonallinen suhde"," kappalainen")
genForms = c("kappalaisen","harvinaisen erikoistapauksen","valtion valtiossa","persikan","tulipalon","jonkin maininnan","minkään maininnan","persoonallisen suhteen")
partForms = c("kappalaista","harvinaista erikoistapausta","valtiota valtiossa","persikkaa","tulipaloa","mitään mainintaa","persoonallista suhdetta")
attForms = c("on","olet","olen")
itkonen <- itkonen %>%
mutate("responseCase" = case_when(
response %in% nomForms ~ "nom", #if the reponse case is available in the above-defined nominative list, create a new column with the value "nom" for that trial
response %in% genForms ~ "gen", # ... and the same for genitive and partitive, as well as attention
response %in% partForms ~ "part",
response %in% attForms ~ "attn",
TRUE ~ "uncoded"
))
exclusionList <- itkonen %>%
filter(responseCase == "attn") %>% # Take only the attention trials
group_by(workerid) %>% # Group the data frame by each participant
summarise(accuracy = mean(as.numeric(attention))) %>% # For each participant, calculate a score between 0-1, the mean of their attention checks; 1 = passed attention check, 0 = failed attention check
mutate(exclude = ifelse(accuracy < 1,'Yes','No')) %>% #If that mean is anything lower than 1 (perfect attention), we want to give them the characteristic "EXCLUDE=TRUE"
filter(exclude == "Yes") #Now filter out all the people who passed, so we get a list of the people who failed only
itkonen <- itkonen[!(itkonen$workerid %in% exclusionList$workerid),] #Now remove from the full dataframe all the participants who are listed on the list we just created
itkonenOriginal %>%
mutate(itemNomRateOriginal = 100*itemNomRateOriginal) %>%
rename("Item" = item,
"Voice" = voice,
"Type" = type,
"Rate of Nominative (x/100)" = itemNomRateOriginal) %>%
select(-c("itemGenRateOriginal")) %>%
group_by(Item) %>%
slice(1:4) %>%
select(Item, everything()) %>%
collapse_rows_df(Item) %>%
formattable(align=c("l"))
ReplicationOnly <- itkonen %>%
filter(polarity == "positive") %>%
filter(item != "jokin2")
replicationItems <- ReplicationOnly %>%
group_by(item,voice,type,responseCase) %>%
count() %>%
pivot_wider(names_from = responseCase,values_from = n) %>%
replace_na(list(gen=0)) %>%
summarize(itemNomRate = nom/(nom+gen),
itemGenRate = 1-itemNomRate)
compItems <- left_join(itkonenOriginal,replicationItems)
compItems <- compItems %>%
mutate(itemNomRate = trunc(itemNomRate*10^2),
itemGenRate = trunc(itemGenRate*10^2),
itemNomRateOriginal = trunc(itemNomRateOriginal*10^2),
itemGenRateOriginal = trunc(itemGenRateOriginal*10^2),
nomChange = itemNomRate - itemNomRateOriginal) %>%
select(-c("itemGenRate","itemGenRateOriginal"))
ReplicationOnly %>%
group_by(voice,responseCase) %>%
count() %>%
pivot_wider(values_from = n, names_from = responseCase) %>%
summarize(nomRate = nom/(nom + gen)) %>%
ggplot(aes(x=voice,y=nomRate, fill=voice)) +
geom_bar(stat="identity") +
labs(x="Voice",y="Proportion of Responses",title="Replication Results: Voice") +
ylim(0,1) +
geom_text(aes(x=voice,y=nomRate, vjust =-.5, label=trunc(nomRate*10^2)/(10^2))) +
scale_fill_manual(values=voice_palette) +
theme_classic() +
theme(legend.position = "none")
ReplicationOnly %>%
group_by(type,responseCase) %>%
count() %>%
pivot_wider(values_from = n, names_from = responseCase) %>%
summarize(nomRate = nom/(nom + gen)) %>%
ggplot(aes(x=type,y=nomRate, fill=type)) +
geom_bar(stat="identity") +
labs(x="Voice",y="Proportion of Responses",title="Replication Results: Voice") +
ylim(0,1) +
geom_text(aes(x=type,y=nomRate, vjust =-.5, label=trunc(nomRate*10^2)/10^2)) +
scale_fill_manual(values = type_palette) +
theme_classic() +
theme(legend.position = "none")
ReplicationOnly %>%
group_by(type,voice,responseCase) %>%
count() %>%
pivot_wider(values_from = n, names_from = responseCase) %>%
summarize(nomRate = nom/(nom+gen)) %>%
ggplot(aes(x=reorder(type, nomRate),y=nomRate, fill=type)) +
geom_bar(stat="identity") +
geom_text(aes(x=type,y=nomRate, vjust =-.5, label=trunc(nomRate*10^2))) +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Voice x Structure") +
scale_fill_manual(values=type_palette) +
facet_wrap(~voice) +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
ReplicationOnly %>%
filter(type=="existential") %>%
group_by(item,responseCase) %>%
count() %>%
pivot_wider(values_from = n, names_from = responseCase) %>%
summarize(nomRate = nom/(nom+gen)) %>%
ggplot(aes(x=reorder(item, -nomRate),y=nomRate, fill=item)) +
geom_bar(stat="identity") +
geom_text(aes(x=item,y=nomRate, vjust =-.5, label=trunc(nomRate*10^2))) +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Existential Only") +
scale_fill_brewer(palette="Paired") +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
ReplicationOnly %>%
filter(type=="predicative") %>%
group_by(item,responseCase) %>%
count() %>%
pivot_wider(values_from = n, names_from = responseCase) %>%
summarize(nomRate = nom/(nom+gen)) %>%
ggplot(aes(x=reorder(item, -nomRate),y=nomRate, fill=item)) +
geom_bar(stat="identity") +
geom_text(aes(x=item,y=nomRate, vjust =-.5, label=trunc(nomRate*10^2))) +
labs(x="Item", y="Proportion of Nominative Responses", title="Nominative Rates of Replication Items: Predicative Only") +
scale_fill_brewer(palette="Paired") +
theme_classic() +
ylim(0,1) +
theme(legend.position = "none")
nomRates <- ReplicationOnly %>%
group_by(workerid,responseCase) %>%
count() %>%
pivot_wider(names_from = responseCase,values_from = n) %>%
summarize(NomRate = nom/22)
ReplicationOnly <- left_join(ReplicationOnly,nomRates)
ReplicationOnly %>%
filter(!is.na(age)) %>%
#  filter(age < 60) %>%
ggplot(aes(x=age,y=NomRate)) +
geom_point() +
geom_smooth(method="lm") +
labs(y="Rate of Nominative Produced",title="Replication Results: Age")
ReplicationOnly %>%
filter(education != -1) %>%
ggplot(aes(x=education,y=NomRate)) +
geom_point() +
geom_smooth(method = "lm") +
labs(y="Rate of Nominative Produced",title="Replication Results: Age")
